import { observer } from "mobx-react-lite";
import { Table, Button, TextInput, Select } from "@gravity-ui/uikit";
import { useState } from "react";
import placesStore from "../store/placesStore";
import { Link } from "react-router-dom";

const Admin = observer(() => {
  const [newPlace, setNewPlace] = useState({
    name: "",
    description: "",
    imageUrl: "",
    location: "",
    latitude: "",
    longitude: "",
    rating: "3",
  });

  const handleAddPlace = () => {
    if (!newPlace.name || !newPlace.location) return;

    placesStore.addPlace({
      name: newPlace.name,
      description: newPlace.description,
      imageUrl: newPlace.imageUrl,
      location: newPlace.location,
      latitude: parseFloat(newPlace.latitude),
      longitude: parseFloat(newPlace.longitude),
      rating: Number(newPlace.rating),
    });

    setNewPlace({ name: "", description: "", imageUrl: "", location: "", latitude: "", longitude: "", rating: "3" });
  };

  return (
    <div className="p-4 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      <div className="grid grid-cols-2 gap-4 mb-4">
        <TextInput placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" style={{ margin: '0 16px 10px 0', flexGrow: 1 }} value={newPlace.name} onChange={(e) => setNewPlace({ ...newPlace, name: e.target.value })} />
        <TextInput placeholder="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" style={{ margin: '0 16px 10px 0', flexGrow: 1 }} value={newPlace.location} onChange={(e) => setNewPlace({ ...newPlace, location: e.target.value })} />
        <TextInput placeholder="–®–∏—Ä–æ—Ç–∞" style={{ margin: '0 16px 10px 0', flexGrow: 1 }} value={newPlace.latitude} onChange={(e) => setNewPlace({ ...newPlace, latitude: e.target.value })} />
        <TextInput placeholder="–î–æ–ª–≥–æ—Ç–∞" style={{ margin: '0 16px 10px 0', flexGrow: 1 }} value={newPlace.longitude} onChange={(e) => setNewPlace({ ...newPlace, longitude: e.target.value })} />
        <TextInput placeholder="–§–æ—Ç–æ (URL)" style={{ margin: '0 16px 10px 0', flexGrow: 1 }} value={newPlace.imageUrl} onChange={(e) => setNewPlace({ ...newPlace, imageUrl: e.target.value })} />
        <div style={{ margin: '0 16px 10px 0', flexGrow: 1 }}>
          <Select
            options={[
              { value: "1", content: "1" },
              { value: "2", content: "2" },
              { value: "3", content: "3" },
              { value: "4", content: "4" },
              { value: "5", content: "5" },
            ]}
            value={[newPlace.rating]}
            onUpdate={(value) => setNewPlace({ ...newPlace, rating: value[0] })}
          />
        </div>
        <Button view="action" onClick={handleAddPlace}>–î–æ–±–∞–≤–∏—Ç—å</Button>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π */}
      <Table
        columns={[
          { id: "name", name: "–ù–∞–∑–≤–∞–Ω–∏–µ" },
          { id: "location", name: "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" },
          { id: "status", name: "–°—Ç–∞—Ç—É—Å" },
          { id: "actions", name: "–î–µ–π—Å—Ç–≤–∏—è" },
        ]}
        data={placesStore.places.map((place) => ({
          ...place,
          actions: (
            <>
              <Button view="flat" size="s" onClick={() => placesStore.toggleStatus(place.id)}>
                {place.status === "–í –ø–ª–∞–Ω–∞—Ö" ? "‚úÖ –û—Å–º–æ—Ç—Ä–µ–Ω–∞" : "üîÑ –í –ø–ª–∞–Ω–∞—Ö"}
              </Button>
              <Button view="flat" size="s" onClick={() => placesStore.removePlace(place.id)}>
                ‚ùå –£–¥–∞–ª–∏—Ç—å
              </Button>
            </>
          ),
        }))}
      />

      <Link to="/">
        <Button view="action" className="mt-4">–ù–∞–∑–∞–¥</Button>
      </Link>
    </div>
  );
});

export default Admin;